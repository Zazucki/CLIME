{
  "level1": {
    "e1": "The command ls prints out current working directory and the files within it.\nls has many options that will list different files, directories, and information.\nBelow are the options listed with what each option ( IE ls -a, ls -f) does.\n\n\nOPTIONS\n-l long format, displaying Unix file types, permissions, number of hard links, owner, group, size, last-modified date and filename \n-f do not sort. Useful for directories containing large numbers of files.\n-F appends a character revealing the nature of a file, for example, * for an executable, or / for a directory. Regular files have no suffix.\n-a lists all files in the given directory, including those whose names startwith \".\" (which are hidden files in Unix). By default, these files are excludedfrom the list.\n-R recursively lists subdirectories. The command ls -R / would therefore list all files.\n-d shows information about a symbolic link or directory, rather than about the link's target or listing the contents of a directory.\n-t sort the list of files by modification time\n-h print sizes in human readable format. (e.g., 1K, 234M, 2G, etc.) This option is not part of the POSIX standard, although implemented in several systems,e.g., GNU coreutils in 1997,FreeBSD 4.5 in 2002,and Solaris 9 in 2002.",
    "e2": "-1 (the numeric digit one) force output to be one entry per line.",
    "e3": "The cd command, allows you to change your directory when working in your terminal.\nBelow are a few way you can use the cd command to your benefit.\n\n\nOPTIONS \n- cd by itself or cd ~ will always put you in your home directory.\n- cd . will leave you in the same directory you are currently in (i.e. your current directory won't change). This can be useful if your shell's internal code can't deal with the directory you are in being recreated; running cd . will place your shell in the recreated directory.\n-cd ~username will put you in username's home directory. ",
    "e4": "-cd dir (without a /) will put you in a subdirectory; for example, if you are in /usr, typing cd bin will put you in /usr/bin, while cd /bin puts you in /bin.\n\n-cd .. will move you up one directory. So, if you are /usr/bin/tmp, cd .. moves you to /usr/bin, while cd ../.. moves you to /usr (i.e. up two levels). You can use this indirection to access subdirectories too. So, from /usr/bin/tmp, you can use cd ../../local to go to /usr/local.\n\n-cd - will switch you to the previous directory. For example, if you are in /usr/bin/tmp, and go to /etc, you can type cd - to go back to /usr/bin/tmp. You can use this to toggle back and forth between two directories.",
    "e5": "-This environment variable “prints” write your current working directory in standard output.\n\n-This command is helpful when needing path names or if you are lost in the directory.\n\n-Comes in hand with ls (another command) to help you move along within the directory.",
    "e6": "level 1 e6\nline2",
    "e7": "level 1 e7\nline2",
    "e8": "level 1 e8\nline2",
    "e9": "level 1 e9\nline2",
    "e10": "level 1 e10\nline2"
  },
  "level2": {
    "e1": "level 1 e1\nline2",
    "e2": "level 1 e2\nline2",
    "e3": "level 1 e3\nline2",
    "e4": "level 1 e4\nline2",
    "e5": "level 1 e5\nline2",
    "e6": "level 1 e6\nline2",
    "e7": "level 1 e7\nline2",
    "e8": "level 1 e8\nline2",
    "e9": "level 1 e9\nline2",
    "e10": "level 1 e10\nline2"
  },
  "level3": {
    "e1": "level 1 e1\nline2",
    "e2": "level 1 e2\nline2",
    "e3": "level 1 e3\nline2",
    "e4": "level 1 e4\nline2",
    "e5": "level 1 e5\nline2",
    "e6": "level 1 e6\nline2",
    "e7": "level 1 e7\nline2",
    "e8": "level 1 e8\nline2",
    "e9": "level 1 e9\nline2",
    "e10": "level 1 e10\nline2"
  }
}